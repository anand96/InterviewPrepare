class Solution{
    private int result =0;
    private int emptySquare =0;

    public int uniquePathsIII(int[][] grid)
    {
        int startRow =0,startCol =0;

        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j] == 0)
                emptySquare++;
                else if(grid[i][j] ==1)
                {
                    startRow =i;
                    startCol =j;
                }
            }
        }
        dfs(grid, startRow, startCol, -1)
        return result;
    }

    private void dfs(int[][] grid, int row,int col, int count){
        if(row<0 || col <0 || row>=grid.length || col>=grid[0].length || grid[row][col] ==-1)
            return;

        if(grid[row][col]==2)
        {
            if(count==emptySquare)
                result++;
            return;
        }

        int temp = grid[row][col];
        grid[row][col] = -1;

        dfs(grid, row+1, col, count+1);
        dfs(grid, row-1, col, count+1);
        dfs(grid, row, col+1; count+1);
        dfs(grid, row, col-1, count+1);

        grid[row][col] = temp;


    }
}