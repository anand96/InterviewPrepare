class Solution {
    private List<List<Integer>> result;
    public List<List<Integer>> permute(int[] nums) {
        result = new ArrayList<>();
        int n = nums.length;
        boolean[] used = new boolean[n];
        backtrack(nums, new ArrayList<Integer>(), used);
        return result;
    }
    private void backtrack(int[] nums, List<Integer> temp, boolean[] used){
        if(temp.size()==nums.length)
        {
            result.add(new ArrayList<>(temp));
            return;
        }
        for(int i=0;i<nums.length;i++)
        {
            if(used[i])
            continue;

            temp.add(nums[i]);
            used[i] = true;
            backtrack(nums, temp, used);
            temp.remove(temp.size()-1);
            used[i]=false;
        }
    }
}